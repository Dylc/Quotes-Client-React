import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { fetchQuoteByQuery } from './searchBarAPI';
import { IQuote } from '../quote/quoteSlice';

export interface QuoteState {
  query: string
  status: 'idle' | 'loading' | 'failed'
  quotes: IQuote[]
  isSearching: boolean;
}

const initialState: QuoteState = {
  query: "",
  status: 'idle',
  quotes: [],
  isSearching: false
};

export interface IFetchQuoteAsync {
  query: number,
}

export const fetchQuoteByQueryAsync = createAsyncThunk(
  'quote/fetchQuoteByQuery',
  async (query: string) => {
    const response = await fetchQuoteByQuery(query);
    return response.data;
  }
);

export const searchBarSlice = createSlice({
  name: 'searchBar',
  initialState,
  reducers: {
    setIsSearching: (state, action: PayloadAction<boolean>) => {
      state.isSearching = action.payload;
    },
    // decrementCounter: (state) => {
    //   state.counter -= 1;
    // },
    // // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action: PayloadAction<number>) => {
    //   state.value += action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchQuoteByQueryAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchQuoteByQueryAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.quotes = action.payload.rows;
      });
  },
});

export const { setIsSearching } = searchBarSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectSearchedQuotes = (state: RootState) => state.searchBar.quotes;
export const selectIsSearching = (state: RootState) => state.searchBar.isSearching;
export const selectStatus = (state: RootState) => state.searchBar.status;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementCounter = () => (
//   dispatch,
//   getState
// ) => {
//   const state = getState();
//   const quotes = selectQuotes(state);
//   const counter = selectCounter(state);
//   const skip = selectSkip(state);
//   if (counter >= quotes.length - 1){
//     dispatch(fetchQuoteByQueryAsync({
//       // lang: 'he',
//       skip: skip
//     }))
//     dispatch(increment())
//   } else {
//     dispatch(increment())
//   }
// };

export default searchBarSlice.reducer;
